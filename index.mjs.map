{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/debug.js","../lib/main.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNonNegative } from '@stdlib/assert-is-nonnegative-number';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0QX2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( '0QX2i', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( '0QX30', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( '0QX84', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( '0QX4x', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( '0QX35', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( '0QX3b', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:hypergeometric' );\n\n\n// EXPORTS //\n\nexport default debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport isError from '@stdlib/assert-is-error';\nimport assign from '@stdlib/object-assign';\nimport inherit from '@stdlib/utils-inherit';\nimport setNonEnumerable from '@stdlib/utils-define-nonenumerable-property';\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-read-write-accessor';\nimport { factory as rhypergeom } from '@stdlib/random-base-hypergeometric';\nimport string2buffer from '@stdlib/buffer-from-string';\nimport nextTick from '@stdlib/utils-next-tick';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\nimport debug from './debug.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @constructor\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {RangeError} `K` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 20, 10, 7, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( N, K, n, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 3 ) {\n\t\t\treturn new RandomStream( N, K, n, options );\n\t\t}\n\t\treturn new RandomStream( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( '0QX2p', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( '0QX3k', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( '0QX2y', n ) );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be less than or equal to the first argument.' );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument must be less than or equal to the first argument.' );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rhypergeom( N, K, n, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nexport default RandomStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport assign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport RandomStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {RangeError} `K` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 20, 10, 7, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( N, K, n, options ) {\n\tvar opts;\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0QX2h', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( N, K, n, opts );\n}\n\n\n// EXPORTS //\n\nexport default objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport assign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport RandomStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 5, 3, 2 ) );\n* }\n*/\nfunction factory( N, K, n, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( N ) ) {\n\t\t\tthrow new TypeError( format( '0QX2h', N ) );\n\t\t}\n\t\topts = assign( {}, N );\n\t} else if ( nargs > 3 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0QX2h', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 3 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - population size\n\t* @param {NonNegativeInteger} K - subpopulation size\n\t* @param {NonNegativeInteger} n - number of draws\n\t* @throws {TypeError} `N` must be a nonnegative integer\n\t* @throws {TypeError} `K` must be a nonnegative integer\n\t* @throws {TypeError} `n` must be a nonnegative integer\n\t* @throws {RangeError} `n` must be less than or equal to `N`\n\t* @throws {RangeError} `K` must be less than or equal to `N`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( N, K, n ) {\n\t\treturn new RandomStream( N, K, n, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `N` must be a nonnegative integer\n\t* @throws {TypeError} `K` must be a nonnegative integer\n\t* @throws {TypeError} `n` must be a nonnegative integer\n\t* @throws {RangeError} `n` must be less than or equal to `N`\n\t* @throws {RangeError} `K` must be less than or equal to `N`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( N, K, n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @module @stdlib/random-streams-hypergeometric\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import randomStream from '@stdlib/random-streams-hypergeometric';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 5, 3, 2, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* import randomStream from '@stdlib/random-streams-hypergeometric';\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 5, 3, 2 ) );\n* }\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import randomStream from '@stdlib/random-streams-hypergeometric';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 5, 3, 2, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport objectMode from './object_mode.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","opts","options","isObject","hasOwnProp","sep","isString","TypeError","format","objectMode","isBoolean","encoding","highWaterMark","isNonNegative","iter","isNonNegativeInteger","siter","isPositiveInteger","prng","seed","state","copy","debug","logger","Readable","require$$0","RandomStream","N","K","n","err","this","arguments","length","RangeError","assign","DEFAULTS","JSON","stringify","call","setNonEnumerable","setNonEnumerableReadOnly","rhypergeom","_prng","PRNG","factory","nargs","isPlainObject","createStream1","createStream2","inherit","setReadOnlyAccessor","prototype","seedLength","setReadWriteAccessor","s","stateLength","byteLength","FLG","r","_destroyed","_i","_iter","push","_objectMode","toString","string2buffer","_sep","_siter","emit","error","self","nextTick","isError","message","setReadOnly","main"],"mappings":"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"}